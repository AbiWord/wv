On platforms which can run libole2 (originally developed for Excel support
in Gnumeric), we'll use it to parse our OLE2 structured storage objects,
as it will allow use to avoid creating temp files for the data streams.
When the libole2 code thoroughly tested, it will show up here (it's small),
but since it's dependent on glib, we won't want it to be the only method
for reading ole objects.

So, I'll abstract the current use of FILE* (and there corresponding stdio
manipulation functions) and then #IFDEFs in the appropriate io functions
at compile time.

I propose changing:
FILE* to OLE_STREAM*
fseek to ole_seek
ftell to ole_tell
?getc to read_8ubit
 for reasons 1) make it like the other read functions
         and 2) we need to abstract getc

The read_(16|32)ubit usage can remain intact, as they are already 
abstracted functions. We'll just provide an alternative, libole2-using 
set. We will need to make a read_8ubit (as mentioned above), however.

Also, the new method will need a function to replace wvOLEDecode and
wvOLEFree. wvOLEDecode will change to:
int wvOLEDecode(char*, OLE_STREAM**, OLE_STREAM**, ...

For using the current ole code, the original read/write functions are used
(slightly modified to typecast appropriately), OLE_STREAM* is just a typedef 
for FILE*, and ole_seek/tell are just defines.

This method will require very little change in the current code, and make it
easy to swap the OLE handler with relative ease.

libole2.c contains all but the Decode/Free functions. I'll move the existing
functions to a similar laola.c (or something like that). Make necessary
ifdefs and migrate the code to the abstracted interface.
